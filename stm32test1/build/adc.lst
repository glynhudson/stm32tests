ARM GAS  /tmp/cc7Q9Mky.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"adc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_ADC2_Init,"ax",%progbits
  22              		.align	2
  23              		.global	MX_ADC2_Init
  24              		.thumb
  25              		.thumb_func
  27              	MX_ADC2_Init:
  28              	.LFB124:
  29              		.file 1 "Src/adc.c"
   1:Src/adc.c     **** /**
   2:Src/adc.c     ****   ******************************************************************************
   3:Src/adc.c     ****   * File Name          : ADC.c
   4:Src/adc.c     ****   * Description        : This file provides code for the configuration
   5:Src/adc.c     ****   *                      of the ADC instances.
   6:Src/adc.c     ****   ******************************************************************************
   7:Src/adc.c     ****   ** This notice applies to any and all portions of this file
   8:Src/adc.c     ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/adc.c     ****   * USER CODE END. Other portions of this file, whether 
  10:Src/adc.c     ****   * inserted by the user or by software development tools
  11:Src/adc.c     ****   * are owned by their respective copyright owners.
  12:Src/adc.c     ****   *
  13:Src/adc.c     ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/adc.c     ****   *
  15:Src/adc.c     ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/adc.c     ****   * are permitted provided that the following conditions are met:
  17:Src/adc.c     ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/adc.c     ****   *      this list of conditions and the following disclaimer.
  19:Src/adc.c     ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/adc.c     ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/adc.c     ****   *      and/or other materials provided with the distribution.
  22:Src/adc.c     ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/adc.c     ****   *      may be used to endorse or promote products derived from this software
  24:Src/adc.c     ****   *      without specific prior written permission.
  25:Src/adc.c     ****   *
  26:Src/adc.c     ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/adc.c     ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/adc.c     ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/adc.c     ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /tmp/cc7Q9Mky.s 			page 2


  30:Src/adc.c     ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/adc.c     ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/adc.c     ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/adc.c     ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/adc.c     ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/adc.c     ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/adc.c     ****   *
  37:Src/adc.c     ****   ******************************************************************************
  38:Src/adc.c     ****   */
  39:Src/adc.c     **** 
  40:Src/adc.c     **** /* Includes ------------------------------------------------------------------*/
  41:Src/adc.c     **** #include "adc.h"
  42:Src/adc.c     **** 
  43:Src/adc.c     **** #include "gpio.h"
  44:Src/adc.c     **** #include "dma.h"
  45:Src/adc.c     **** 
  46:Src/adc.c     **** /* USER CODE BEGIN 0 */
  47:Src/adc.c     **** 
  48:Src/adc.c     **** /* USER CODE END 0 */
  49:Src/adc.c     **** 
  50:Src/adc.c     **** ADC_HandleTypeDef hadc2;
  51:Src/adc.c     **** DMA_HandleTypeDef hdma_adc2;
  52:Src/adc.c     **** 
  53:Src/adc.c     **** /* ADC2 init function */
  54:Src/adc.c     **** void MX_ADC2_Init(void)
  55:Src/adc.c     **** {
  30              		.loc 1 55 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 24
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 00B5     		push	{lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 14, -4
  38 0002 87B0     		sub	sp, sp, #28
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 32
  56:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
  57:Src/adc.c     **** 
  58:Src/adc.c     ****     /**Common config 
  59:Src/adc.c     ****     */
  60:Src/adc.c     ****   hadc2.Instance = ADC2;
  41              		.loc 1 60 0
  42 0004 7148     		ldr	r0, .L19
  43 0006 724B     		ldr	r3, .L19+4
  44 0008 0360     		str	r3, [r0]
  61:Src/adc.c     ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  45              		.loc 1 61 0
  46 000a 0023     		movs	r3, #0
  47 000c 4360     		str	r3, [r0, #4]
  62:Src/adc.c     ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  48              		.loc 1 62 0
  49 000e 8360     		str	r3, [r0, #8]
  63:Src/adc.c     ****   hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  50              		.loc 1 63 0
  51 0010 0122     		movs	r2, #1
  52 0012 0261     		str	r2, [r0, #16]
ARM GAS  /tmp/cc7Q9Mky.s 			page 3


  64:Src/adc.c     ****   hadc2.Init.ContinuousConvMode = ENABLE;
  53              		.loc 1 64 0
  54 0014 C261     		str	r2, [r0, #28]
  65:Src/adc.c     ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
  55              		.loc 1 65 0
  56 0016 4362     		str	r3, [r0, #36]
  66:Src/adc.c     ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  57              		.loc 1 66 0
  58 0018 0363     		str	r3, [r0, #48]
  67:Src/adc.c     ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  59              		.loc 1 67 0
  60 001a C262     		str	r2, [r0, #44]
  68:Src/adc.c     ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  61              		.loc 1 68 0
  62 001c C360     		str	r3, [r0, #12]
  69:Src/adc.c     ****   hadc2.Init.NbrOfConversion = 15;
  63              		.loc 1 69 0
  64 001e 0F21     		movs	r1, #15
  65 0020 0162     		str	r1, [r0, #32]
  70:Src/adc.c     ****   hadc2.Init.DMAContinuousRequests = ENABLE;
  66              		.loc 1 70 0
  67 0022 4263     		str	r2, [r0, #52]
  71:Src/adc.c     ****   hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  68              		.loc 1 71 0
  69 0024 0822     		movs	r2, #8
  70 0026 4261     		str	r2, [r0, #20]
  72:Src/adc.c     ****   hadc2.Init.LowPowerAutoWait = DISABLE;
  71              		.loc 1 72 0
  72 0028 8361     		str	r3, [r0, #24]
  73:Src/adc.c     ****   hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  73              		.loc 1 73 0
  74 002a 8363     		str	r3, [r0, #56]
  74:Src/adc.c     ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
  75              		.loc 1 74 0
  76 002c FFF7FEFF 		bl	HAL_ADC_Init
  77              	.LVL0:
  78 0030 18B1     		cbz	r0, .L2
  75:Src/adc.c     ****   {
  76:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
  79              		.loc 1 76 0
  80 0032 4C21     		movs	r1, #76
  81 0034 6748     		ldr	r0, .L19+8
  82 0036 FFF7FEFF 		bl	_Error_Handler
  83              	.LVL1:
  84              	.L2:
  77:Src/adc.c     ****   }
  78:Src/adc.c     **** 
  79:Src/adc.c     ****     /**Configure Regular Channel 
  80:Src/adc.c     ****     */
  81:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
  85              		.loc 1 81 0
  86 003a 0123     		movs	r3, #1
  87 003c 0093     		str	r3, [sp]
  82:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_1;
  88              		.loc 1 82 0
  89 003e 0193     		str	r3, [sp, #4]
  83:Src/adc.c     ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
ARM GAS  /tmp/cc7Q9Mky.s 			page 4


  90              		.loc 1 83 0
  91 0040 0023     		movs	r3, #0
  92 0042 0393     		str	r3, [sp, #12]
  84:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  93              		.loc 1 84 0
  94 0044 0293     		str	r3, [sp, #8]
  85:Src/adc.c     ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
  95              		.loc 1 85 0
  96 0046 0493     		str	r3, [sp, #16]
  86:Src/adc.c     ****   sConfig.Offset = 0;
  97              		.loc 1 86 0
  98 0048 0593     		str	r3, [sp, #20]
  87:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  99              		.loc 1 87 0
 100 004a 6946     		mov	r1, sp
 101 004c 5F48     		ldr	r0, .L19
 102 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 103              	.LVL2:
 104 0052 18B1     		cbz	r0, .L3
  88:Src/adc.c     ****   {
  89:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 105              		.loc 1 89 0
 106 0054 5921     		movs	r1, #89
 107 0056 5F48     		ldr	r0, .L19+8
 108 0058 FFF7FEFF 		bl	_Error_Handler
 109              	.LVL3:
 110              	.L3:
  90:Src/adc.c     ****   }
  91:Src/adc.c     **** 
  92:Src/adc.c     ****     /**Configure Regular Channel 
  93:Src/adc.c     ****     */
  94:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_3;
 111              		.loc 1 94 0
 112 005c 0323     		movs	r3, #3
 113 005e 0093     		str	r3, [sp]
  95:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 114              		.loc 1 95 0
 115 0060 0223     		movs	r3, #2
 116 0062 0193     		str	r3, [sp, #4]
  96:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 117              		.loc 1 96 0
 118 0064 6946     		mov	r1, sp
 119 0066 5948     		ldr	r0, .L19
 120 0068 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 121              	.LVL4:
 122 006c 18B1     		cbz	r0, .L4
  97:Src/adc.c     ****   {
  98:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 123              		.loc 1 98 0
 124 006e 6221     		movs	r1, #98
 125 0070 5848     		ldr	r0, .L19+8
 126 0072 FFF7FEFF 		bl	_Error_Handler
 127              	.LVL5:
 128              	.L4:
  99:Src/adc.c     ****   }
 100:Src/adc.c     **** 
 101:Src/adc.c     ****     /**Configure Regular Channel 
ARM GAS  /tmp/cc7Q9Mky.s 			page 5


 102:Src/adc.c     ****     */
 103:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_4;
 129              		.loc 1 103 0
 130 0076 0423     		movs	r3, #4
 131 0078 0093     		str	r3, [sp]
 104:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 132              		.loc 1 104 0
 133 007a 0323     		movs	r3, #3
 134 007c 0193     		str	r3, [sp, #4]
 105:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 135              		.loc 1 105 0
 136 007e 6946     		mov	r1, sp
 137 0080 5248     		ldr	r0, .L19
 138 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 139              	.LVL6:
 140 0086 18B1     		cbz	r0, .L5
 106:Src/adc.c     ****   {
 107:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 141              		.loc 1 107 0
 142 0088 6B21     		movs	r1, #107
 143 008a 5248     		ldr	r0, .L19+8
 144 008c FFF7FEFF 		bl	_Error_Handler
 145              	.LVL7:
 146              	.L5:
 108:Src/adc.c     ****   }
 109:Src/adc.c     **** 
 110:Src/adc.c     ****     /**Configure Regular Channel 
 111:Src/adc.c     ****     */
 112:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 147              		.loc 1 112 0
 148 0090 0123     		movs	r3, #1
 149 0092 0093     		str	r3, [sp]
 113:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 150              		.loc 1 113 0
 151 0094 0423     		movs	r3, #4
 152 0096 0193     		str	r3, [sp, #4]
 114:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 153              		.loc 1 114 0
 154 0098 6946     		mov	r1, sp
 155 009a 4C48     		ldr	r0, .L19
 156 009c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 157              	.LVL8:
 158 00a0 18B1     		cbz	r0, .L6
 115:Src/adc.c     ****   {
 116:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 159              		.loc 1 116 0
 160 00a2 7421     		movs	r1, #116
 161 00a4 4B48     		ldr	r0, .L19+8
 162 00a6 FFF7FEFF 		bl	_Error_Handler
 163              	.LVL9:
 164              	.L6:
 117:Src/adc.c     ****   }
 118:Src/adc.c     **** 
 119:Src/adc.c     ****     /**Configure Regular Channel 
 120:Src/adc.c     ****     */
 121:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_5;
 165              		.loc 1 121 0
ARM GAS  /tmp/cc7Q9Mky.s 			page 6


 166 00aa 0523     		movs	r3, #5
 167 00ac 0093     		str	r3, [sp]
 122:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 168              		.loc 1 122 0
 169 00ae 0193     		str	r3, [sp, #4]
 123:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 170              		.loc 1 123 0
 171 00b0 6946     		mov	r1, sp
 172 00b2 4648     		ldr	r0, .L19
 173 00b4 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 174              	.LVL10:
 175 00b8 18B1     		cbz	r0, .L7
 124:Src/adc.c     ****   {
 125:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 176              		.loc 1 125 0
 177 00ba 7D21     		movs	r1, #125
 178 00bc 4548     		ldr	r0, .L19+8
 179 00be FFF7FEFF 		bl	_Error_Handler
 180              	.LVL11:
 181              	.L7:
 126:Src/adc.c     ****   }
 127:Src/adc.c     **** 
 128:Src/adc.c     ****     /**Configure Regular Channel 
 129:Src/adc.c     ****     */
 130:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_6;
 182              		.loc 1 130 0
 183 00c2 0623     		movs	r3, #6
 184 00c4 0093     		str	r3, [sp]
 131:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 185              		.loc 1 131 0
 186 00c6 0193     		str	r3, [sp, #4]
 132:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 187              		.loc 1 132 0
 188 00c8 6946     		mov	r1, sp
 189 00ca 4048     		ldr	r0, .L19
 190 00cc FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 191              	.LVL12:
 192 00d0 18B1     		cbz	r0, .L8
 133:Src/adc.c     ****   {
 134:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 193              		.loc 1 134 0
 194 00d2 8621     		movs	r1, #134
 195 00d4 3F48     		ldr	r0, .L19+8
 196 00d6 FFF7FEFF 		bl	_Error_Handler
 197              	.LVL13:
 198              	.L8:
 135:Src/adc.c     ****   }
 136:Src/adc.c     **** 
 137:Src/adc.c     ****     /**Configure Regular Channel 
 138:Src/adc.c     ****     */
 139:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 199              		.loc 1 139 0
 200 00da 0123     		movs	r3, #1
 201 00dc 0093     		str	r3, [sp]
 140:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 202              		.loc 1 140 0
 203 00de 0723     		movs	r3, #7
ARM GAS  /tmp/cc7Q9Mky.s 			page 7


 204 00e0 0193     		str	r3, [sp, #4]
 141:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 205              		.loc 1 141 0
 206 00e2 6946     		mov	r1, sp
 207 00e4 3948     		ldr	r0, .L19
 208 00e6 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 209              	.LVL14:
 210 00ea 18B1     		cbz	r0, .L9
 142:Src/adc.c     ****   {
 143:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 211              		.loc 1 143 0
 212 00ec 8F21     		movs	r1, #143
 213 00ee 3948     		ldr	r0, .L19+8
 214 00f0 FFF7FEFF 		bl	_Error_Handler
 215              	.LVL15:
 216              	.L9:
 144:Src/adc.c     ****   }
 145:Src/adc.c     **** 
 146:Src/adc.c     ****     /**Configure Regular Channel 
 147:Src/adc.c     ****     */
 148:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_7;
 217              		.loc 1 148 0
 218 00f4 0723     		movs	r3, #7
 219 00f6 0093     		str	r3, [sp]
 149:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 220              		.loc 1 149 0
 221 00f8 0823     		movs	r3, #8
 222 00fa 0193     		str	r3, [sp, #4]
 150:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 223              		.loc 1 150 0
 224 00fc 6946     		mov	r1, sp
 225 00fe 3348     		ldr	r0, .L19
 226 0100 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 227              	.LVL16:
 228 0104 18B1     		cbz	r0, .L10
 151:Src/adc.c     ****   {
 152:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 229              		.loc 1 152 0
 230 0106 9821     		movs	r1, #152
 231 0108 3248     		ldr	r0, .L19+8
 232 010a FFF7FEFF 		bl	_Error_Handler
 233              	.LVL17:
 234              	.L10:
 153:Src/adc.c     ****   }
 154:Src/adc.c     **** 
 155:Src/adc.c     ****     /**Configure Regular Channel 
 156:Src/adc.c     ****     */
 157:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_8;
 235              		.loc 1 157 0
 236 010e 0823     		movs	r3, #8
 237 0110 0093     		str	r3, [sp]
 158:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_9;
 238              		.loc 1 158 0
 239 0112 0923     		movs	r3, #9
 240 0114 0193     		str	r3, [sp, #4]
 159:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 241              		.loc 1 159 0
ARM GAS  /tmp/cc7Q9Mky.s 			page 8


 242 0116 6946     		mov	r1, sp
 243 0118 2C48     		ldr	r0, .L19
 244 011a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 245              	.LVL18:
 246 011e 18B1     		cbz	r0, .L11
 160:Src/adc.c     ****   {
 161:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 247              		.loc 1 161 0
 248 0120 A121     		movs	r1, #161
 249 0122 2C48     		ldr	r0, .L19+8
 250 0124 FFF7FEFF 		bl	_Error_Handler
 251              	.LVL19:
 252              	.L11:
 162:Src/adc.c     ****   }
 163:Src/adc.c     **** 
 164:Src/adc.c     ****     /**Configure Regular Channel 
 165:Src/adc.c     ****     */
 166:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 253              		.loc 1 166 0
 254 0128 0123     		movs	r3, #1
 255 012a 0093     		str	r3, [sp]
 167:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_10;
 256              		.loc 1 167 0
 257 012c 0A23     		movs	r3, #10
 258 012e 0193     		str	r3, [sp, #4]
 168:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 259              		.loc 1 168 0
 260 0130 6946     		mov	r1, sp
 261 0132 2648     		ldr	r0, .L19
 262 0134 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 263              	.LVL20:
 264 0138 18B1     		cbz	r0, .L12
 169:Src/adc.c     ****   {
 170:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 265              		.loc 1 170 0
 266 013a AA21     		movs	r1, #170
 267 013c 2548     		ldr	r0, .L19+8
 268 013e FFF7FEFF 		bl	_Error_Handler
 269              	.LVL21:
 270              	.L12:
 171:Src/adc.c     ****   }
 172:Src/adc.c     **** 
 173:Src/adc.c     ****     /**Configure Regular Channel 
 174:Src/adc.c     ****     */
 175:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_9;
 271              		.loc 1 175 0
 272 0142 0923     		movs	r3, #9
 273 0144 0093     		str	r3, [sp]
 176:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_11;
 274              		.loc 1 176 0
 275 0146 0B23     		movs	r3, #11
 276 0148 0193     		str	r3, [sp, #4]
 177:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 277              		.loc 1 177 0
 278 014a 6946     		mov	r1, sp
 279 014c 1F48     		ldr	r0, .L19
 280 014e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  /tmp/cc7Q9Mky.s 			page 9


 281              	.LVL22:
 282 0152 18B1     		cbz	r0, .L13
 178:Src/adc.c     ****   {
 179:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 283              		.loc 1 179 0
 284 0154 B321     		movs	r1, #179
 285 0156 1F48     		ldr	r0, .L19+8
 286 0158 FFF7FEFF 		bl	_Error_Handler
 287              	.LVL23:
 288              	.L13:
 180:Src/adc.c     ****   }
 181:Src/adc.c     **** 
 182:Src/adc.c     ****     /**Configure Regular Channel 
 183:Src/adc.c     ****     */
 184:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_11;
 289              		.loc 1 184 0
 290 015c 0B23     		movs	r3, #11
 291 015e 0093     		str	r3, [sp]
 185:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_12;
 292              		.loc 1 185 0
 293 0160 0C23     		movs	r3, #12
 294 0162 0193     		str	r3, [sp, #4]
 186:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 295              		.loc 1 186 0
 296 0164 6946     		mov	r1, sp
 297 0166 1948     		ldr	r0, .L19
 298 0168 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 299              	.LVL24:
 300 016c 18B1     		cbz	r0, .L14
 187:Src/adc.c     ****   {
 188:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 301              		.loc 1 188 0
 302 016e BC21     		movs	r1, #188
 303 0170 1848     		ldr	r0, .L19+8
 304 0172 FFF7FEFF 		bl	_Error_Handler
 305              	.LVL25:
 306              	.L14:
 189:Src/adc.c     ****   }
 190:Src/adc.c     **** 
 191:Src/adc.c     ****     /**Configure Regular Channel 
 192:Src/adc.c     ****     */
 193:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 307              		.loc 1 193 0
 308 0176 0123     		movs	r3, #1
 309 0178 0093     		str	r3, [sp]
 194:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_13;
 310              		.loc 1 194 0
 311 017a 0D23     		movs	r3, #13
 312 017c 0193     		str	r3, [sp, #4]
 195:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 313              		.loc 1 195 0
 314 017e 6946     		mov	r1, sp
 315 0180 1248     		ldr	r0, .L19
 316 0182 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 317              	.LVL26:
 318 0186 18B1     		cbz	r0, .L15
 196:Src/adc.c     ****   {
ARM GAS  /tmp/cc7Q9Mky.s 			page 10


 197:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 319              		.loc 1 197 0
 320 0188 C521     		movs	r1, #197
 321 018a 1248     		ldr	r0, .L19+8
 322 018c FFF7FEFF 		bl	_Error_Handler
 323              	.LVL27:
 324              	.L15:
 198:Src/adc.c     ****   }
 199:Src/adc.c     **** 
 200:Src/adc.c     ****     /**Configure Regular Channel 
 201:Src/adc.c     ****     */
 202:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_12;
 325              		.loc 1 202 0
 326 0190 0C23     		movs	r3, #12
 327 0192 0093     		str	r3, [sp]
 203:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_14;
 328              		.loc 1 203 0
 329 0194 0E23     		movs	r3, #14
 330 0196 0193     		str	r3, [sp, #4]
 204:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 331              		.loc 1 204 0
 332 0198 6946     		mov	r1, sp
 333 019a 0C48     		ldr	r0, .L19
 334 019c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 335              	.LVL28:
 336 01a0 18B1     		cbz	r0, .L16
 205:Src/adc.c     ****   {
 206:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 337              		.loc 1 206 0
 338 01a2 CE21     		movs	r1, #206
 339 01a4 0B48     		ldr	r0, .L19+8
 340 01a6 FFF7FEFF 		bl	_Error_Handler
 341              	.LVL29:
 342              	.L16:
 207:Src/adc.c     ****   }
 208:Src/adc.c     **** 
 209:Src/adc.c     ****     /**Configure Regular Channel 
 210:Src/adc.c     ****     */
 211:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_14;
 343              		.loc 1 211 0
 344 01aa 0E23     		movs	r3, #14
 345 01ac 0093     		str	r3, [sp]
 212:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_15;
 346              		.loc 1 212 0
 347 01ae 0F23     		movs	r3, #15
 348 01b0 0193     		str	r3, [sp, #4]
 213:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 349              		.loc 1 213 0
 350 01b2 6946     		mov	r1, sp
 351 01b4 0548     		ldr	r0, .L19
 352 01b6 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 353              	.LVL30:
 354 01ba 18B1     		cbz	r0, .L1
 214:Src/adc.c     ****   {
 215:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 355              		.loc 1 215 0
 356 01bc D721     		movs	r1, #215
ARM GAS  /tmp/cc7Q9Mky.s 			page 11


 357 01be 0548     		ldr	r0, .L19+8
 358 01c0 FFF7FEFF 		bl	_Error_Handler
 359              	.LVL31:
 360              	.L1:
 216:Src/adc.c     ****   }
 217:Src/adc.c     **** 
 218:Src/adc.c     **** }
 361              		.loc 1 218 0
 362 01c4 07B0     		add	sp, sp, #28
 363              	.LCFI2:
 364              		.cfi_def_cfa_offset 4
 365              		@ sp needed
 366 01c6 5DF804FB 		ldr	pc, [sp], #4
 367              	.L20:
 368 01ca 00BF     		.align	2
 369              	.L19:
 370 01cc 00000000 		.word	hadc2
 371 01d0 00010050 		.word	1342177536
 372 01d4 00000000 		.word	.LC0
 373              		.cfi_endproc
 374              	.LFE124:
 376              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 377              		.align	2
 378              		.global	HAL_ADC_MspInit
 379              		.thumb
 380              		.thumb_func
 382              	HAL_ADC_MspInit:
 383              	.LFB125:
 219:Src/adc.c     **** 
 220:Src/adc.c     **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
 221:Src/adc.c     **** {
 384              		.loc 1 221 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 24
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL32:
 222:Src/adc.c     **** 
 223:Src/adc.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 224:Src/adc.c     ****   if(adcHandle->Instance==ADC2)
 389              		.loc 1 224 0
 390 0000 0268     		ldr	r2, [r0]
 391 0002 264B     		ldr	r3, .L26
 392 0004 9A42     		cmp	r2, r3
 393 0006 47D1     		bne	.L25
 221:Src/adc.c     **** 
 394              		.loc 1 221 0
 395 0008 70B5     		push	{r4, r5, r6, lr}
 396              	.LCFI3:
 397              		.cfi_def_cfa_offset 16
 398              		.cfi_offset 4, -16
 399              		.cfi_offset 5, -12
 400              		.cfi_offset 6, -8
 401              		.cfi_offset 14, -4
 402 000a 86B0     		sub	sp, sp, #24
 403              	.LCFI4:
 404              		.cfi_def_cfa_offset 40
 405 000c 0446     		mov	r4, r0
ARM GAS  /tmp/cc7Q9Mky.s 			page 12


 406              	.LBB2:
 225:Src/adc.c     ****   {
 226:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspInit 0 */
 227:Src/adc.c     **** 
 228:Src/adc.c     ****   /* USER CODE END ADC2_MspInit 0 */
 229:Src/adc.c     ****     /* ADC2 clock enable */
 230:Src/adc.c     ****     __HAL_RCC_ADC12_CLK_ENABLE();
 407              		.loc 1 230 0
 408 000e 244B     		ldr	r3, .L26+4
 409 0010 5A69     		ldr	r2, [r3, #20]
 410 0012 42F08052 		orr	r2, r2, #268435456
 411 0016 5A61     		str	r2, [r3, #20]
 412 0018 5B69     		ldr	r3, [r3, #20]
 413 001a 03F08053 		and	r3, r3, #268435456
 414 001e 0093     		str	r3, [sp]
 415 0020 009B     		ldr	r3, [sp]
 416              	.LBE2:
 231:Src/adc.c     ****   
 232:Src/adc.c     ****     /**ADC2 GPIO Configuration    
 233:Src/adc.c     ****     PC0     ------> ADC2_IN6
 234:Src/adc.c     ****     PC1     ------> ADC2_IN7
 235:Src/adc.c     ****     PC2     ------> ADC2_IN8
 236:Src/adc.c     ****     PC3     ------> ADC2_IN9
 237:Src/adc.c     ****     PA4     ------> ADC2_IN1
 238:Src/adc.c     ****     PA6     ------> ADC2_IN3
 239:Src/adc.c     ****     PA7     ------> ADC2_IN4
 240:Src/adc.c     ****     PC4     ------> ADC2_IN5
 241:Src/adc.c     ****     PC5     ------> ADC2_IN11
 242:Src/adc.c     ****     PB2     ------> ADC2_IN12
 243:Src/adc.c     ****     PB11     ------> ADC2_IN14 
 244:Src/adc.c     ****     */
 245:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 417              		.loc 1 245 0
 418 0022 3F23     		movs	r3, #63
 419 0024 0193     		str	r3, [sp, #4]
 246:Src/adc.c     ****                           |GPIO_PIN_4|GPIO_PIN_5;
 247:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 420              		.loc 1 247 0
 421 0026 0326     		movs	r6, #3
 422 0028 0296     		str	r6, [sp, #8]
 248:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 423              		.loc 1 248 0
 424 002a 0025     		movs	r5, #0
 425 002c 0395     		str	r5, [sp, #12]
 249:Src/adc.c     ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 426              		.loc 1 249 0
 427 002e 01A9     		add	r1, sp, #4
 428 0030 1C48     		ldr	r0, .L26+8
 429              	.LVL33:
 430 0032 FFF7FEFF 		bl	HAL_GPIO_Init
 431              	.LVL34:
 250:Src/adc.c     **** 
 251:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 432              		.loc 1 251 0
 433 0036 D023     		movs	r3, #208
 434 0038 0193     		str	r3, [sp, #4]
 252:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
ARM GAS  /tmp/cc7Q9Mky.s 			page 13


 435              		.loc 1 252 0
 436 003a 0296     		str	r6, [sp, #8]
 253:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 437              		.loc 1 253 0
 438 003c 0395     		str	r5, [sp, #12]
 254:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 439              		.loc 1 254 0
 440 003e 01A9     		add	r1, sp, #4
 441 0040 4FF09040 		mov	r0, #1207959552
 442 0044 FFF7FEFF 		bl	HAL_GPIO_Init
 443              	.LVL35:
 255:Src/adc.c     **** 
 256:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 444              		.loc 1 256 0
 445 0048 40F60403 		movw	r3, #2052
 446 004c 0193     		str	r3, [sp, #4]
 257:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 447              		.loc 1 257 0
 448 004e 0296     		str	r6, [sp, #8]
 258:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 449              		.loc 1 258 0
 450 0050 0395     		str	r5, [sp, #12]
 259:Src/adc.c     ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 451              		.loc 1 259 0
 452 0052 01A9     		add	r1, sp, #4
 453 0054 1448     		ldr	r0, .L26+12
 454 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 455              	.LVL36:
 260:Src/adc.c     **** 
 261:Src/adc.c     ****     /* ADC2 DMA Init */
 262:Src/adc.c     ****     /* ADC2 Init */
 263:Src/adc.c     ****     hdma_adc2.Instance = DMA2_Channel1;
 456              		.loc 1 263 0
 457 005a 1448     		ldr	r0, .L26+16
 458 005c 144B     		ldr	r3, .L26+20
 459 005e 0360     		str	r3, [r0]
 264:Src/adc.c     ****     hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 460              		.loc 1 264 0
 461 0060 4560     		str	r5, [r0, #4]
 265:Src/adc.c     ****     hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 462              		.loc 1 265 0
 463 0062 8560     		str	r5, [r0, #8]
 266:Src/adc.c     ****     hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 464              		.loc 1 266 0
 465 0064 8023     		movs	r3, #128
 466 0066 C360     		str	r3, [r0, #12]
 267:Src/adc.c     ****     hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 467              		.loc 1 267 0
 468 0068 4FF48073 		mov	r3, #256
 469 006c 0361     		str	r3, [r0, #16]
 268:Src/adc.c     ****     hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 470              		.loc 1 268 0
 471 006e 4FF48063 		mov	r3, #1024
 472 0072 4361     		str	r3, [r0, #20]
 269:Src/adc.c     ****     hdma_adc2.Init.Mode = DMA_CIRCULAR;
 473              		.loc 1 269 0
 474 0074 2023     		movs	r3, #32
ARM GAS  /tmp/cc7Q9Mky.s 			page 14


 475 0076 8361     		str	r3, [r0, #24]
 270:Src/adc.c     ****     hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 476              		.loc 1 270 0
 477 0078 4FF40053 		mov	r3, #8192
 478 007c C361     		str	r3, [r0, #28]
 271:Src/adc.c     ****     if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 479              		.loc 1 271 0
 480 007e FFF7FEFF 		bl	HAL_DMA_Init
 481              	.LVL37:
 482 0082 20B1     		cbz	r0, .L23
 272:Src/adc.c     ****     {
 273:Src/adc.c     ****       _Error_Handler(__FILE__, __LINE__);
 483              		.loc 1 273 0
 484 0084 40F21111 		movw	r1, #273
 485 0088 0A48     		ldr	r0, .L26+24
 486 008a FFF7FEFF 		bl	_Error_Handler
 487              	.LVL38:
 488              	.L23:
 274:Src/adc.c     ****     }
 275:Src/adc.c     **** 
 276:Src/adc.c     ****     __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 489              		.loc 1 276 0
 490 008e 074B     		ldr	r3, .L26+16
 491 0090 E363     		str	r3, [r4, #60]
 492 0092 5C62     		str	r4, [r3, #36]
 277:Src/adc.c     **** 
 278:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspInit 1 */
 279:Src/adc.c     **** 
 280:Src/adc.c     ****   /* USER CODE END ADC2_MspInit 1 */
 281:Src/adc.c     ****   }
 282:Src/adc.c     **** }
 493              		.loc 1 282 0
 494 0094 06B0     		add	sp, sp, #24
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 16
 497              		@ sp needed
 498 0096 70BD     		pop	{r4, r5, r6, pc}
 499              	.LVL39:
 500              	.L25:
 501              	.LCFI6:
 502              		.cfi_def_cfa_offset 0
 503              		.cfi_restore 4
 504              		.cfi_restore 5
 505              		.cfi_restore 6
 506              		.cfi_restore 14
 507 0098 7047     		bx	lr
 508              	.L27:
 509 009a 00BF     		.align	2
 510              	.L26:
 511 009c 00010050 		.word	1342177536
 512 00a0 00100240 		.word	1073876992
 513 00a4 00080048 		.word	1207961600
 514 00a8 00040048 		.word	1207960576
 515 00ac 00000000 		.word	hdma_adc2
 516 00b0 08040240 		.word	1073873928
 517 00b4 00000000 		.word	.LC0
 518              		.cfi_endproc
ARM GAS  /tmp/cc7Q9Mky.s 			page 15


 519              	.LFE125:
 521              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 522              		.align	2
 523              		.global	HAL_ADC_MspDeInit
 524              		.thumb
 525              		.thumb_func
 527              	HAL_ADC_MspDeInit:
 528              	.LFB126:
 283:Src/adc.c     **** 
 284:Src/adc.c     **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 285:Src/adc.c     **** {
 529              		.loc 1 285 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              	.LVL40:
 286:Src/adc.c     **** 
 287:Src/adc.c     ****   if(adcHandle->Instance==ADC2)
 534              		.loc 1 287 0
 535 0000 0268     		ldr	r2, [r0]
 536 0002 0E4B     		ldr	r3, .L32
 537 0004 9A42     		cmp	r2, r3
 538 0006 18D1     		bne	.L31
 285:Src/adc.c     **** 
 539              		.loc 1 285 0
 540 0008 10B5     		push	{r4, lr}
 541              	.LCFI7:
 542              		.cfi_def_cfa_offset 8
 543              		.cfi_offset 4, -8
 544              		.cfi_offset 14, -4
 545 000a 0446     		mov	r4, r0
 288:Src/adc.c     ****   {
 289:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspDeInit 0 */
 290:Src/adc.c     **** 
 291:Src/adc.c     ****   /* USER CODE END ADC2_MspDeInit 0 */
 292:Src/adc.c     ****     /* Peripheral clock disable */
 293:Src/adc.c     ****     __HAL_RCC_ADC12_CLK_DISABLE();
 546              		.loc 1 293 0
 547 000c 0C4A     		ldr	r2, .L32+4
 548 000e 5369     		ldr	r3, [r2, #20]
 549 0010 23F08053 		bic	r3, r3, #268435456
 550 0014 5361     		str	r3, [r2, #20]
 294:Src/adc.c     ****   
 295:Src/adc.c     ****     /**ADC2 GPIO Configuration    
 296:Src/adc.c     ****     PC0     ------> ADC2_IN6
 297:Src/adc.c     ****     PC1     ------> ADC2_IN7
 298:Src/adc.c     ****     PC2     ------> ADC2_IN8
 299:Src/adc.c     ****     PC3     ------> ADC2_IN9
 300:Src/adc.c     ****     PA4     ------> ADC2_IN1
 301:Src/adc.c     ****     PA6     ------> ADC2_IN3
 302:Src/adc.c     ****     PA7     ------> ADC2_IN4
 303:Src/adc.c     ****     PC4     ------> ADC2_IN5
 304:Src/adc.c     ****     PC5     ------> ADC2_IN11
 305:Src/adc.c     ****     PB2     ------> ADC2_IN12
 306:Src/adc.c     ****     PB11     ------> ADC2_IN14 
 307:Src/adc.c     ****     */
 308:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
ARM GAS  /tmp/cc7Q9Mky.s 			page 16


 551              		.loc 1 308 0
 552 0016 3F21     		movs	r1, #63
 553 0018 0A48     		ldr	r0, .L32+8
 554              	.LVL41:
 555 001a FFF7FEFF 		bl	HAL_GPIO_DeInit
 556              	.LVL42:
 309:Src/adc.c     ****                           |GPIO_PIN_4|GPIO_PIN_5);
 310:Src/adc.c     **** 
 311:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7);
 557              		.loc 1 311 0
 558 001e D021     		movs	r1, #208
 559 0020 4FF09040 		mov	r0, #1207959552
 560 0024 FFF7FEFF 		bl	HAL_GPIO_DeInit
 561              	.LVL43:
 312:Src/adc.c     **** 
 313:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_11);
 562              		.loc 1 313 0
 563 0028 40F60401 		movw	r1, #2052
 564 002c 0648     		ldr	r0, .L32+12
 565 002e FFF7FEFF 		bl	HAL_GPIO_DeInit
 566              	.LVL44:
 314:Src/adc.c     **** 
 315:Src/adc.c     ****     /* ADC2 DMA DeInit */
 316:Src/adc.c     ****     HAL_DMA_DeInit(adcHandle->DMA_Handle);
 567              		.loc 1 316 0
 568 0032 E06B     		ldr	r0, [r4, #60]
 569 0034 FFF7FEFF 		bl	HAL_DMA_DeInit
 570              	.LVL45:
 571 0038 10BD     		pop	{r4, pc}
 572              	.LVL46:
 573              	.L31:
 574              	.LCFI8:
 575              		.cfi_def_cfa_offset 0
 576              		.cfi_restore 4
 577              		.cfi_restore 14
 578 003a 7047     		bx	lr
 579              	.L33:
 580              		.align	2
 581              	.L32:
 582 003c 00010050 		.word	1342177536
 583 0040 00100240 		.word	1073876992
 584 0044 00080048 		.word	1207961600
 585 0048 00040048 		.word	1207960576
 586              		.cfi_endproc
 587              	.LFE126:
 589              		.comm	hdma_adc2,68,4
 590              		.comm	hadc2,84,4
 591              		.section	.rodata.str1.4,"aMS",%progbits,1
 592              		.align	2
 593              	.LC0:
 594 0000 5372632F 		.ascii	"Src/adc.c\000"
 594      6164632E 
 594      6300
 595              		.text
 596              	.Letext0:
 597              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 598              		.file 3 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/cc7Q9Mky.s 			page 17


 599              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 600              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 601              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 602              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 603              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 604              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 605              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 606              		.file 11 "Drivers/CMSIS/Include/core_cm4.h"
 607              		.file 12 "Inc/dma.h"
ARM GAS  /tmp/cc7Q9Mky.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/cc7Q9Mky.s:22     .text.MX_ADC2_Init:00000000 $t
     /tmp/cc7Q9Mky.s:27     .text.MX_ADC2_Init:00000000 MX_ADC2_Init
     /tmp/cc7Q9Mky.s:370    .text.MX_ADC2_Init:000001cc $d
                            *COM*:00000054 hadc2
     /tmp/cc7Q9Mky.s:377    .text.HAL_ADC_MspInit:00000000 $t
     /tmp/cc7Q9Mky.s:382    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/cc7Q9Mky.s:511    .text.HAL_ADC_MspInit:0000009c $d
                            *COM*:00000044 hdma_adc2
     /tmp/cc7Q9Mky.s:522    .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/cc7Q9Mky.s:527    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/cc7Q9Mky.s:582    .text.HAL_ADC_MspDeInit:0000003c $d
     /tmp/cc7Q9Mky.s:592    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_ADC_Init
_Error_Handler
HAL_ADC_ConfigChannel
HAL_GPIO_Init
HAL_DMA_Init
HAL_GPIO_DeInit
HAL_DMA_DeInit
